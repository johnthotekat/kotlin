package

public fun br(/*0*/ y: kotlin.Any?): kotlin.Unit
public fun branchedAndNested(/*0*/ x: kotlin.Any?, /*1*/ y: kotlin.Any?): kotlin.Unit
public fun branchedAndNestedWithNativeOperators(/*0*/ x: kotlin.Any?, /*1*/ y: kotlin.Any?): kotlin.Unit
@kotlin.internal.Returns(value = ConstantValue.FALSE) public fun equalsFalse(/*0*/ @kotlin.internal.Not @kotlin.internal.Equals(value = ConstantValue.FALSE) x: kotlin.Boolean): kotlin.Boolean
@kotlin.internal.Returns(value = ConstantValue.FALSE) public fun equalsTrue(/*0*/ @kotlin.internal.Not @kotlin.internal.Equals(value = ConstantValue.TRUE) x: kotlin.Boolean): kotlin.Boolean
@kotlin.internal.Returns(value = ConstantValue.FALSE) public fun isInt(/*0*/ @kotlin.internal.Not @kotlin.internal.IsInstance(klass = kotlin.Int::class) x: kotlin.Any?): kotlin.Boolean
@kotlin.internal.Returns(value = ConstantValue.FALSE) public fun isString(/*0*/ @kotlin.internal.Not @kotlin.internal.IsInstance(klass = kotlin.String::class) x: kotlin.Any?): kotlin.Boolean
@kotlin.internal.Throws public fun myAssert(/*0*/ @kotlin.internal.Equals(value = ConstantValue.FALSE) condition: kotlin.Boolean): kotlin.Unit
public fun nested1(/*0*/ x: kotlin.Any?): kotlin.Unit
public fun nested2(/*0*/ x: kotlin.Any?): kotlin.Unit
public fun nested3(/*0*/ x: kotlin.Any?): kotlin.Unit
@kotlin.internal.Returns(value = ConstantValue.FALSE) public fun notEqualsNull(/*0*/ @kotlin.internal.Equals(value = ConstantValue.NULL) x: kotlin.Any?): kotlin.Boolean
@kotlin.internal.Returns(value = ConstantValue.NULL) public fun nullWhenNotString(/*0*/ @kotlin.internal.Not @kotlin.internal.IsInstance(klass = kotlin.String::class) x: kotlin.Any?): kotlin.String?
